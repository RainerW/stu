package com.seitenbau.testing.dbunit.model;
import com.seitenbau.testing.dbunit.model.AttendModel;
import com.seitenbau.testing.dbunit.model.ExamModel;
import com.seitenbau.testing.dbunit.model.GiveLectureModel;
import com.seitenbau.testing.dbunit.model.IsTutorModel;
import com.seitenbau.testing.dbunit.model.LectureModel;
import com.seitenbau.testing.dbunit.model.ParticipateModel;
import com.seitenbau.testing.dbunit.model.ProfessorModel;
import com.seitenbau.testing.dbunit.model.StudentModel;
import com.seitenbau.testing.dbunit.model.AttendTable.RowBuilder_Attend;
import com.seitenbau.testing.dbunit.model.ExamTable.RowBuilder_Exam;
import com.seitenbau.testing.dbunit.model.GiveLectureTable.RowBuilder_GiveLecture;
import com.seitenbau.testing.dbunit.model.IsTutorTable.RowBuilder_IsTutor;
import com.seitenbau.testing.dbunit.model.LectureTable.RowBuilder_Lecture;
import com.seitenbau.testing.dbunit.model.ParticipateTable.RowBuilder_Participate;
import com.seitenbau.testing.dbunit.model.ProfessorTable.RowBuilder_Professor;
import com.seitenbau.testing.dbunit.model.StudentTable.RowBuilder_Student;
import com.seitenbau.testing.dbunit.util.DbCompare;
import com.seitenbau.testing.util.DateUtil;
import com.seitenbau.testing.util.date.DateBuilder;
import com.seitenbau.testing.dbunit.extend.DatasetIdGenerator;
import com.seitenbau.testing.dbunit.extend.impl.DefaultIdGenerator;
import org.dbunit.dataset.DefaultDataSet;
import org.dbunit.dataset.IDataSet;
import java.util.Date;


/*********************************************************
  {@link DbUnitDatasetFactory} factory to create in-memory 
  {@link IDataSet} for your Database. 
  </br>
  This class is generated by {@link com.seitenbau.testing.dbunit.generator.DatabaseModel#generate }
**********************************************************/
public abstract class STUExampleDBDataSet
             implements com.seitenbau.testing.dbunit.extend.DbUnitDatasetFactory
{
  /** 
   * Now at time of creation, This is 'fixed' so the time can be used when
   * adding multipe lines, it's still kind of 'now' but can be predicted.
   */ 
  DateBuilder _jetzt = DateUtil.datum();
  
  /**
   * Reference to an {@link DatasetIdGenerator}. Used to set IDs.
   * See Flags when adding an columnin your model to create nextId()
   * methods.
   */
  DatasetIdGenerator _idGenerator;

  // All Tables as instances ( see {@link #prepareTables} for init code ) 
  public ProfessorTable table_Professor = new ProfessorTable();
  public LectureTable table_Lecture = new LectureTable();
  public ExamTable table_Exam = new ExamTable();
  public StudentTable table_Student = new StudentTable();
  public GiveLectureTable table_GiveLecture = new GiveLectureTable();
  public ParticipateTable table_Participate = new ParticipateTable();
  public IsTutorTable table_IsTutor = new IsTutorTable();
  public AttendTable table_Attend = new AttendTable();

  /**
   * Create a new instance of this DbUnitDatasetFactory. This
   * will create all tables and invoke the template methods to
   * modify the DataSet content.<br/> 
   * To inject your own data use the initDataSet() method.
   */
  public STUExampleDBDataSet() 
  {
    prepareTables();
    beforeInitDataSet();
    initDataSet();
    afterInitDataSet();
  }
  
  /**
   * Create the actual DBUnit IDataSet.
   */
  public IDataSet createDBUnitDataSet()
  {
    beforeDataSetCreation();
 try {     DefaultDataSet dataSet = new DefaultDataSet();
    dataSet.addTable(table_Professor);
    table_Professor.resetIterator();
    dataSet.addTable(table_Lecture);
    table_Lecture.resetIterator();
    dataSet.addTable(table_Exam);
    table_Exam.resetIterator();
    dataSet.addTable(table_Student);
    table_Student.resetIterator();
    dataSet.addTable(table_GiveLecture);
    table_GiveLecture.resetIterator();
    dataSet.addTable(table_Participate);
    table_Participate.resetIterator();
    dataSet.addTable(table_IsTutor);
    table_IsTutor.resetIterator();
    dataSet.addTable(table_Attend);
    table_Attend.resetIterator();
     afterDataSetCreation(dataSet);
     return finalModify( dataSet );
    } catch(org.dbunit.database.AmbiguousTableNameException e) {
       throw new RuntimeException(e);
    } 
  }
  
  /**
   * Injection point. Last processing template method to modify the resulting 
   * Dataset created by createDBUnitDataSet(). 
   * You should really know what you're doing!
   *
   * @param dataSet
   * @return
   */
  protected DefaultDataSet finalModify(DefaultDataSet dataSet)
  {
    return dataSet;
  }
  
  /**
   * Template Method, get's called after createDBUnitDataSet() method
   * Use this only if really needed.
   */
  protected void afterDataSetCreation(DefaultDataSet dataSet)  throws org.dbunit.database.AmbiguousTableNameException  {
  }

  /**
   * Template Method, get's called before createDBUnitDataSet() method.
   * Use this only if really needed. 
   */
  protected void beforeDataSetCreation()
  {
  }
  
  /**
   * Template Method, got called after the initDataSet() method
   */
  protected void afterInitDataSet()
  {
  }

  /**
   * Inner method to prepare the table instances.
   * Do not overwrite.
   */
  protected void prepareTables()
  {
    table_Professor.setDataset(this);
    table_Lecture.setDataset(this);
    table_Exam.setDataset(this);
    table_Student.setDataset(this);
    table_GiveLecture.setDataset(this);
    table_Participate.setDataset(this);
    table_IsTutor.setDataset(this);
    table_Attend.setDataset(this);
  }
  
  /**
   * Template Method, got called before the initDataSet() method
   */
  protected void beforeInitDataSet()
  {
  }

  /**
   * Initialize the content of your Dataset here.
   */
  abstract protected void initDataSet();
  
  /** 
   * Compare the given Date to be 'equal' around (+-15s). 
   */
  public Date around(DateBuilder datum) 
  {
      return DbCompare.warp(datum);
  }

  /** 
   * <p>
   * Create org get the 'current' timestamp as DateBuilder. 
   * Subsequent calls will give you the same builder and TIME again!
   * This allows you to use the same "now" for the whole dataset.<br>
   * <b>!!But be aware that this will be a fixed now, of the time where the 
   * Factory was created!!</b> 
   * </p>
   */
  public DateBuilder jetzt()
  {
    return _jetzt;
  }
  
  /**
   * Change the used id generator
   **/
  public void setIdGenerator(DatasetIdGenerator gen)
  {
    _idGenerator = gen;
  }
  
  /**
   * Return the current active {@link DatasetIdGenerator}
   */
  public DatasetIdGenerator getIdGenerator()
  {
    if(_idGenerator == null) 
    {
      _idGenerator = new DefaultIdGenerator();
    }
    return _idGenerator;
  }
  
  
  /** run the given modifiers on this dataset */
  public STUExampleDBDataSet modify(STUExampleDBDataSetModifier...modifiers) 
  {
    if(modifiers==null) { return this; }
    for(STUExampleDBDataSetModifier modifier : modifiers) 
    {
      modifier.modify(this);
    }
    return this;
  }
  
  /**
   * Interface for the double dispatch. Used by {@link #modify} to
   * extract creation logic into an external strategy.
   */ 
  public static interface STUExampleDBDataSetModifier {
    void modify(STUExampleDBDataSet dataset);
  }
  
  /* ************************************************************ */
  /* *             convenient add(*) methods                    * */
  /* ************************************************************ */
  
  /** 
   * Adds the given row into the Table 'PROFESSOR'
   */
  public RowBuilder_Professor add(RowBuilder_Professor row) 
  {
    return table_Professor.insertRow(row);
  }
  /** 
   * Adds the given row into the Table 'PROFESSOR'
   */
  public RowBuilder_Professor add(ProfessorModel row) 
  {
    return table_Professor.insertRow(row);
  }
  /**
   * ! work in progress !
   * create a new Model of the Type ProfessorModel with 
   * the same IdGenerator that this Dataset  
   */
  /*
  public ProfessorModel createProfessor() 
  {
    ProfessorModel model = new ProfessorModel();
    model.setIdGenerator(getIdGenerator());
    model.nextId();
    return model;
  }
  */
  /** 
   * Adds the given row into the Table 'LECTURE'
   */
  public RowBuilder_Lecture add(RowBuilder_Lecture row) 
  {
    return table_Lecture.insertRow(row);
  }
  /** 
   * Adds the given row into the Table 'LECTURE'
   */
  public RowBuilder_Lecture add(LectureModel row) 
  {
    return table_Lecture.insertRow(row);
  }
  /**
   * ! work in progress !
   * create a new Model of the Type LectureModel with 
   * the same IdGenerator that this Dataset  
   */
  /*
  public LectureModel createLecture() 
  {
    LectureModel model = new LectureModel();
    model.setIdGenerator(getIdGenerator());
    model.nextId();
    return model;
  }
  */
  /** 
   * Adds the given row into the Table 'EXAM'
   */
  public RowBuilder_Exam add(RowBuilder_Exam row) 
  {
    return table_Exam.insertRow(row);
  }
  /** 
   * Adds the given row into the Table 'EXAM'
   */
  public RowBuilder_Exam add(ExamModel row) 
  {
    return table_Exam.insertRow(row);
  }
  /**
   * ! work in progress !
   * create a new Model of the Type ExamModel with 
   * the same IdGenerator that this Dataset  
   */
  /*
  public ExamModel createExam() 
  {
    ExamModel model = new ExamModel();
    model.setIdGenerator(getIdGenerator());
    model.nextId();
    return model;
  }
  */
  /** 
   * Adds the given row into the Table 'STUDENT'
   */
  public RowBuilder_Student add(RowBuilder_Student row) 
  {
    return table_Student.insertRow(row);
  }
  /** 
   * Adds the given row into the Table 'STUDENT'
   */
  public RowBuilder_Student add(StudentModel row) 
  {
    return table_Student.insertRow(row);
  }
  /**
   * ! work in progress !
   * create a new Model of the Type StudentModel with 
   * the same IdGenerator that this Dataset  
   */
  /*
  public StudentModel createStudent() 
  {
    StudentModel model = new StudentModel();
    model.setIdGenerator(getIdGenerator());
    model.nextStudentNumber();
    return model;
  }
  */
  /** 
   * Adds the given row into the Table 'GIVE_LECTURE'
   */
  public RowBuilder_GiveLecture add(RowBuilder_GiveLecture row) 
  {
    return table_GiveLecture.insertRow(row);
  }
  /** 
   * Adds the given row into the Table 'GIVE_LECTURE'
   */
  public RowBuilder_GiveLecture add(GiveLectureModel row) 
  {
    return table_GiveLecture.insertRow(row);
  }
  /**
   * ! work in progress !
   * create a new Model of the Type GiveLectureModel with 
   * the same IdGenerator that this Dataset  
   */
  /*
  public GiveLectureModel createGiveLecture() 
  {
    GiveLectureModel model = new GiveLectureModel();
    model.setIdGenerator(getIdGenerator());
    return model;
  }
  */
  /** 
   * Adds the given row into the Table 'PARTICIPATE'
   */
  public RowBuilder_Participate add(RowBuilder_Participate row) 
  {
    return table_Participate.insertRow(row);
  }
  /** 
   * Adds the given row into the Table 'PARTICIPATE'
   */
  public RowBuilder_Participate add(ParticipateModel row) 
  {
    return table_Participate.insertRow(row);
  }
  /**
   * ! work in progress !
   * create a new Model of the Type ParticipateModel with 
   * the same IdGenerator that this Dataset  
   */
  /*
  public ParticipateModel createParticipate() 
  {
    ParticipateModel model = new ParticipateModel();
    model.setIdGenerator(getIdGenerator());
    return model;
  }
  */
  /** 
   * Adds the given row into the Table 'IS_TUTOR'
   */
  public RowBuilder_IsTutor add(RowBuilder_IsTutor row) 
  {
    return table_IsTutor.insertRow(row);
  }
  /** 
   * Adds the given row into the Table 'IS_TUTOR'
   */
  public RowBuilder_IsTutor add(IsTutorModel row) 
  {
    return table_IsTutor.insertRow(row);
  }
  /**
   * ! work in progress !
   * create a new Model of the Type IsTutorModel with 
   * the same IdGenerator that this Dataset  
   */
  /*
  public IsTutorModel createIsTutor() 
  {
    IsTutorModel model = new IsTutorModel();
    model.setIdGenerator(getIdGenerator());
    return model;
  }
  */
  /** 
   * Adds the given row into the Table 'ATTEND'
   */
  public RowBuilder_Attend add(RowBuilder_Attend row) 
  {
    return table_Attend.insertRow(row);
  }
  /** 
   * Adds the given row into the Table 'ATTEND'
   */
  public RowBuilder_Attend add(AttendModel row) 
  {
    return table_Attend.insertRow(row);
  }
  /**
   * ! work in progress !
   * create a new Model of the Type AttendModel with 
   * the same IdGenerator that this Dataset  
   */
  /*
  public AttendModel createAttend() 
  {
    AttendModel model = new AttendModel();
    model.setIdGenerator(getIdGenerator());
    return model;
  }
  */
}
