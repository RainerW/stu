package com.seitenbau.testing.dbunit.demomodel;
import com.seitenbau.testing.dbunit.util.DbCompare;
import com.seitenbau.testing.util.DateUtil;
import com.seitenbau.testing.util.date.DateBuilder;
import com.seitenbau.testing.dbunit.extend.DatasetIdGenerator;
import com.seitenbau.testing.dbunit.extend.impl.DefaultIdGenerator;
import org.dbunit.dataset.DefaultDataSet;
import org.dbunit.dataset.IDataSet;
import java.util.Date;

import com.seitenbau.testing.dbunit.demomodel.JobsTable.RowBuilder_Jobs;
import com.seitenbau.testing.dbunit.demomodel.JobsModel;
import com.seitenbau.testing.dbunit.demomodel.TeamsTable.RowBuilder_Teams;
import com.seitenbau.testing.dbunit.demomodel.TeamsModel;
import com.seitenbau.testing.dbunit.demomodel.PersonsTable.RowBuilder_Persons;
import com.seitenbau.testing.dbunit.demomodel.PersonsModel;

/*********************************************************
  {@link DbUnitDatasetFactory} factory to create in-memory 
  {@link IDataSet} for your Database. 
  </br>
  This class is generated by {@link com.seitenbau.testing.dbunit.generator.DatabaseModel#generate }
**********************************************************/
public abstract class STUDataSet
             implements com.seitenbau.testing.dbunit.extend.DbUnitDatasetFactory
{
  /** 
   * Now at time of creation, This is 'fixed' so the time can be used when
   * adding multipe lines, it's still kind of 'now' but can be predicted.
   */ 
  DateBuilder _jetzt = DateUtil.datum();
  
  /**
   * Reference to an {@link DatasetIdGenerator}. Used to set IDs.
   * See Flags when adding an columnin your model to create nextId()
   * methods.
   */
  DatasetIdGenerator _idGenerator;

  // All Tables as instances ( see {@link #prepareTables} for init code ) 
  public JobsTable table_Jobs = new JobsTable();
  public TeamsTable table_Teams = new TeamsTable();
  public PersonsTable table_Persons = new PersonsTable();

  /**
   * Create a new instance of this DbUnitDatasetFactory. This
   * will create all tables and invoke the template methods to
   * modify the DataSet content.<br/> 
   * To inject your own data use the initDataSet() method.
   */
  public STUDataSet() 
  {
    prepareTables();
    beforeInitDataSet();
    initDataSet();
    afterInitDataSet();
  }
  
  /**
   * Create the actual DBUnit IDataSet.
   */
  public IDataSet createDBUnitDataSet()
  {
    beforeDataSetCreation();
 try {     DefaultDataSet dataSet = new DefaultDataSet();
    dataSet.addTable(table_Jobs);
    table_Jobs.resetIterator();
    dataSet.addTable(table_Teams);
    table_Teams.resetIterator();
    dataSet.addTable(table_Persons);
    table_Persons.resetIterator();
     afterDataSetCreation(dataSet);
     return finalModify( dataSet );
    } catch(org.dbunit.database.AmbiguousTableNameException e) {
       throw new RuntimeException(e);
    } 
  }
  
  /**
   * Injection point. Last processing template method to modify the resulting 
   * Dataset created by createDBUnitDataSet(). 
   * You should really know what you're doing!
   *
   * @param dataSet
   * @return
   */
  protected DefaultDataSet finalModify(DefaultDataSet dataSet)
  {
    return dataSet;
  }
  
  /**
   * Template Method, get's called after createDBUnitDataSet() method
   * Use this only if really needed.
   */
  protected void afterDataSetCreation(DefaultDataSet dataSet)  throws org.dbunit.database.AmbiguousTableNameException  {
  }

  /**
   * Template Method, get's called before createDBUnitDataSet() method.
   * Use this only if really needed. 
   */
  protected void beforeDataSetCreation()
  {
  }
  
  /**
   * Template Method, got called after the initDataSet() method
   */
  protected void afterInitDataSet()
  {
  }

  /**
   * Inner method to prepare the table instances.
   * Do not overwrite.
   */
  protected void prepareTables()
  {
    table_Jobs.setDataset(this);
    table_Teams.setDataset(this);
    table_Persons.setDataset(this);
  }
  
  /**
   * Template Method, got called before the initDataSet() method
   */
  protected void beforeInitDataSet()
  {
  }

  /**
   * Initialize the content of your Dataset here.
   */
  abstract protected void initDataSet();
  
  /** 
   * Compare the given Date to be 'equal' around (+-15s). 
   */
  public Date around(DateBuilder datum) 
  {
      return DbCompare.warp(datum);
  }

  /** 
   * <p>
   * Create org get the 'current' timestamp as DateBuilder. 
   * Subsequent calls will give you the same builder and TIME again!
   * This allows you to use the same "now" for the whole dataset.<br>
   * <b>!!But be aware that this will be a fixed now, of the time where the 
   * Factory was created!!</b> 
   * </p>
   */
  public DateBuilder jetzt()
  {
    return _jetzt;
  }
  
  /**
   * Change the used id generator
   **/
  public void setIdGenerator(DatasetIdGenerator gen)
  {
    _idGenerator = gen;
  }
  
  /**
   * Return the current active {@link DatasetIdGenerator}
   */
  public DatasetIdGenerator getIdGenerator()
  {
    if(_idGenerator == null) 
    {
      _idGenerator = new DefaultIdGenerator();
    }
    return _idGenerator;
  }
  
  
  /** run the given modifiers on this dataset */
  public STUDataSet modify(STUDataSetModifier...modifiers) 
  {
    if(modifiers==null) { return this; }
    for(STUDataSetModifier modifier : modifiers) 
    {
      modifier.modify(this);
    }
    return this;
  }
  
  /**
   * Interface for the double dispatch. Used by {@link #modify} to
   * extract creation logic into an external strategy.
   */ 
  public static interface STUDataSetModifier {
    void modify(STUDataSet dataset);
  }
  
  /* ************************************************************ */
  /* *             convenient add(*) methods                    * */
  /* ************************************************************ */
  
  /** 
   * Adds the given row into the Table 'jobs'
   */
  public RowBuilder_Jobs add(RowBuilder_Jobs row) 
  {
    return table_Jobs.insertRow(row);
  }
  /** 
   * Adds the given row into the Table 'jobs'
   */
  public RowBuilder_Jobs add(JobsModel row) 
  {
    return table_Jobs.insertRow(row);
  }
  /**
   * ! work in progress !
   * create a new Model of the Type JobsModel with 
   * the same IdGenerator that this Dataset  
   */
  /*
  public JobsModel createJobs() 
  {
    JobsModel model = new JobsModel();
    model.setIdGenerator(getIdGenerator());
    model.nextId();
    return model;
  }
  */
  /** 
   * Adds the given row into the Table 'teams'
   */
  public RowBuilder_Teams add(RowBuilder_Teams row) 
  {
    return table_Teams.insertRow(row);
  }
  /** 
   * Adds the given row into the Table 'teams'
   */
  public RowBuilder_Teams add(TeamsModel row) 
  {
    return table_Teams.insertRow(row);
  }
  /**
   * ! work in progress !
   * create a new Model of the Type TeamsModel with 
   * the same IdGenerator that this Dataset  
   */
  /*
  public TeamsModel createTeams() 
  {
    TeamsModel model = new TeamsModel();
    model.setIdGenerator(getIdGenerator());
    model.nextId();
    return model;
  }
  */
  /** 
   * Adds the given row into the Table 'persons'
   */
  public RowBuilder_Persons add(RowBuilder_Persons row) 
  {
    return table_Persons.insertRow(row);
  }
  /** 
   * Adds the given row into the Table 'persons'
   */
  public RowBuilder_Persons add(PersonsModel row) 
  {
    return table_Persons.insertRow(row);
  }
  /**
   * ! work in progress !
   * create a new Model of the Type PersonsModel with 
   * the same IdGenerator that this Dataset  
   */
  /*
  public PersonsModel createPersons() 
  {
    PersonsModel model = new PersonsModel();
    model.setIdGenerator(getIdGenerator());
    model.nextId();
    return model;
  }
  */
}
