defaultTasks "clean", "build"

configure(allprojects) {
  apply plugin: "java"
  apply plugin: "idea"

  group = "com.seitenbau.testing"
  version = "1.0.0-SNAPSHOT"

  sourceCompatibility   = 1.6
  targetCompatibility   = 1.6

  ext.commonLangVersion             = "2.6"
  ext.commonsdbcpVersion            = "1.4"
  ext.dbunitVersion                 = "2.3.0"
  ext.derbyVersion                  = "10.9.1.0"
  ext.easymockVersion               = "3.0"
  ext.festAssertVersion             = "1.4"
  ext.guavaVersion                  = "14.0.1"
  ext.groovyVersion                 = "2.0.5"
  ext.hamcrestVersion               = "1.3"
  ext.hibernatPersistanceVersion    = "1.0.1.Final"
  ext.hibernatEntityManagerVersion  = "4.2.0.Final"
  ext.hsqldbVersion                 = "2.2.8"
  ext.junitVersion                  = "4.10"
  ext.logbackVersion                = "1.0.6"
  ext.mockitoVersion                = "1.9.5"
  ext.mysqlConnVersion              = "5.0.5"
  ext.slf4jVersion                  = "1.6.1"
  ext.solrjVersion                  = "4.0.0"
  ext.spockVersion                  = "0.7-groovy-2.0"
  ext.springDataVersion             = "1.3.1.RELEASE"
  ext.springVersion                 = "3.2.2.RELEASE"
  ext.velocityVersion               = "1.7"

  ext.sourceEncoding    = "ISO-8859-1"
  ext.gradleScriptDir   = "${rootProject.projectDir}/gradle"

  compileJava {
    options.encoding = project.sourceEncoding
  }

  apply from: "$gradleScriptDir/publish-maven.gradle"
  apply from: "$gradleScriptDir/eclipse.gradle"
}

configure(subprojects) {
  apply plugin: "groovy"

  dependencies {
    groovy("org.codehaus.groovy:groovy-all:$groovyVersion")
    testCompile("org.spockframework:spock-core:$spockVersion")
  }
}

project("common") {
  dependencies {
    compile("org.apache.velocity:velocity:$velocityVersion")
    compile("commons-lang:commons-lang:$commonLangVersion")
    compile("org.easytesting:fest-assert:$festAssertVersion")
    compile("org.hamcrest:hamcrest-all:$hamcrestVersion", optional)
    compile("org.easymock:easymock:$easymockVersion", optional)
    compile("junit:junit:$junitVersion", optional)
    compile("org.mockito:mockito-all:$mockitoVersion", optional)
    compile("org.springframework:spring-beans:$springVersion", optional)
    compile("ch.qos.logback:logback-classic:$logbackVersion", optional)
    compile("com.google.guava:guava:$guavaVersion", optional)
  }
}

project("database") {
  dependencies {
    compile project(':common')

    compile("junit:junit:$junitVersion", optional)
    compile("commons-dbcp:commons-dbcp:$commonsdbcpVersion", optional)
    compile("org.dbunit:dbunit:$dbunitVersion"){
      exclude module: 'slf4j-api'
      exclude module: 'slf4j-nop'
    }
    compile("org.mockito:mockito-all:${mockitoVersion}", optional)
    compile("org.easytesting:fest-assert:${festAssertVersion}")
    compile("org.apache.solr:solr-solrj:$solrjVersion", optional)
    compile("org.apache.velocity:velocity:$velocityVersion")
    compile("commons-lang:commons-lang:$commonLangVersion")
    compile("org.slf4j:slf4j-api:$slf4jVersion")

    runtime("mysql:mysql-connector-java:$mysqlConnVersion")

    testCompile("org.slf4j:slf4j-log4j12:$slf4jVersion")
  }
}

project("examples") {
  dependencies {
    compile project(':database')
    compile("org.apache.derby:derby:$derbyVersion")
    runtime("org.hsqldb:hsqldb:$hsqldbVersion")
    compile("org.springframework:spring-context:$springVersion")
    compile("org.springframework:spring-orm:$springVersion")
    compile("org.springframework:spring-test:$springVersion")
    compile("org.springframework.data:spring-data-jpa:$springDataVersion")
    compile("org.hibernate.javax.persistence:hibernate-jpa-2.0-api:$hibernatPersistanceVersion")
    compile("org.hibernate:hibernate-entitymanager:$hibernatEntityManagerVersion")
  }
  
  sourceSets {
    dataSetModel {
      java {
        srcDir 'src/test/dataSetModel'
      }
      compileClasspath += configurations.compile
      runtimeClasspath += configurations.runtime
    }
    dataSetDsl {
      java {
        srcDir "build/src/dataSetDsl"
      }
      compileClasspath = configurations.compile
    }
    test {
      compileClasspath += sourceSets.dataSetDsl.output
      runtimeClasspath += sourceSets.dataSetDsl.output
    }
  }

  task generateDataSetDsl(dependsOn: 'dataSetModelClasses', type: JavaExec) {
    inputs.dir  file("src/test/dataSetModel/model")
    outputs.dir file("$buildDir/src/dataSetDsl")
    main      = 'model.Generator'
    args      = ["build/src/dataSetDsl"]
    classpath = sourceSets.dataSetModel.runtimeClasspath
  }

  eclipseClasspath.dependsOn("generateDataSetDsl")
  compileDataSetDslJava.dependsOn("generateDataSetDsl")
  compileTestGroovy.dependsOn("compileDataSetDslJava")
  
}

configure(rootProject) {
  task wrapper(type: Wrapper) { gradleVersion = "1.6" }
}
