#set($filename = ${model.javaName} + "TableBinding" )
#if( $model.package && $model.package.length() != 0 )
#set($package  = ${model.package} + ".dsl" )
#else
#set($package  = "dsl" )
#end
#set($clsBinding = ${model.javaName} + "TableBinding")
#set($clsTable = ${model.javaName} + "Table")
#set($clsRowbuilder = "RowBuilder_" + ${model.javaName})
#set($clsWhere = ${model.javaName} + "Where")
package ${package};

#set($hasIdentifier = false )
#foreach( $col in $model.columns )
#if ( ${col.isIdentifier()} )
#set($hasIdentifier = true )
#end
#end

#if( $hasIdentifier )
import java.util.HashSet;
import java.util.Set;
#end

import ${model.package}.${clsTable}.${clsWhere};
import ${model.package}.${clsTable}.${clsRowbuilder};
#if( $hasIdentifier )
import com.seitenbau.testing.dbunit.util.NullCompatibleEquivalence;
import com.seitenbau.testing.dbunit.dsl.CastUtil;
#end
import com.seitenbau.testing.dbunit.dsl.ColumnBinding;
import com.seitenbau.testing.dbunit.dsl.DatabaseReference;
import com.seitenbau.testing.dbunit.generator.DataType;
import com.seitenbau.testing.dbunit.modifier.IDataSetModifier;

public class $clsBinding {

  private static boolean valueMustBeSetRaw(Object value)
  {
    return (value instanceof DatabaseReference) || (value instanceof IDataSetModifier);
  }

  public static final ColumnBinding<${clsRowbuilder}, ${clsWhere}> REF = new ColumnBinding<${clsRowbuilder}, ${clsWhere}>() 
  {
    @Override
    public void set(${clsRowbuilder} row, Object value)
    {
      // TODO NM think about it :-)
      // Setting reference does not make sense on REF column...
      throw new RuntimeException("Setting on REF is not allowed");
    }
    
    @Override
    public boolean isRefColumn() {
      return true;
    }

    public DataType getDataType() {
      return null;
    }
  };

#foreach( $col in $model.columns )
  public static final ColumnBinding<${clsRowbuilder}, ${clsWhere}> ${col.name} = new ColumnBinding<${clsRowbuilder}, ${clsWhere}>() 
  {
    @Override
    public void set(${clsRowbuilder} row, Object value)
    {
#if ( ${col.isIdentifier()} )
      if (definedIdsSet.contains(row) && !NullCompatibleEquivalence.equals(row.get${col.javaName}(), value)) {
        throw new IllegalStateException("Cannot reset column id [" + row.get${col.javaName}() + " vs " + value + "]");
      }
      definedIdsSet.add(row);
#end
      if (valueMustBeSetRaw(value)) {
        row.set${col.javaName}Raw(value);
      }
      else {
        row.set${col.javaName}((${col.javaType})CastUtil.cast(value, ${col.type}));
      }
    }
#if ( ${col.isIdentifier()} )

    @Override
    public ${clsRowbuilder} query(${clsWhere} findWhere, Object value) {
      return findWhere.${col.javaNameFirstLower}((${col.javaType})CastUtil.cast(value, ${col.type}));
    }

    @Override
    public boolean isIdColumn() {
      return true;
    }
    
    private Set<${clsRowbuilder}> definedIdsSet = new HashSet<${clsRowbuilder}>();
#end

    public DataType getDataType() {
      return ${col.type};
    }
  };

#end
}

