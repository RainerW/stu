#set($filename = "GroovyTableParser.groovy" )
#if( $model.package && $model.package.length() != 0 )
#set($package  = ${model.package} + ".groovy" )
#else
#set($package  = "groovy" )
#end
package ${package};

#if( $model.package && $model.package.length() != 0 )
import ${model.package}.${model.name}DataSet
#end
#foreach( $table in $model.tables )
import ${model.package}.${table.javaName}Table.RowBuilder_${table.javaName}
import ${model.package}.${table.javaName}Table.RowCollection_${table.javaName}
#end
import groovy.transform.ToString

//-----------------------------------
// This is a common part

@ToString
class Row {

  List values = []

  def or(arg) {
    values.add(arg)
    this
  }
}

class ColumnHeader {
  
  String name

  Class type
  
  boolean isIdentificator
  
  String javaName

}

class DatabaseReference {
}
//-----------------------------------

#foreach( $table in $model.tables )
class ${table.javaName}Ref extends DatabaseReference {
#if ( ${table.identifierColumn} )
#set( $col = ${table.identifierColumn} )

#if ( ${col.isAutoIncrement()} || ${col.isIdGenerationAutoInvokeOnInsert()} )  
  // TODO NM replace with IdGenerator
  static ${col.javaType} nextId = 1

#end
  private ${col.javaType} id
  
#if ( ${col.isAutoIncrement()} || ${col.isIdGenerationAutoInvokeOnInsert()} )  
  def ${table.javaName}Ref() {
  }
  
#end
##if ( !${col.isIdGenerationAutoInvokeOnInsert()} )  
  def ${table.javaName}Ref(${col.javaType} id) {
    setId(id)
  }
##end

  ${col.javaType} getId() {
    if (id == null) {
#if ( ${col.isAutoIncrement()} || ${col.isIdGenerationAutoInvokeOnInsert()} )
      // TODO NM replace with IdGenerator
      id = nextId++
#else
      throw new IllegalStateException("No id set");      
#end
    }
    return id
  }

  void setId(${col.javaType} id) {
    if (isDefined() && this.id != id) {
      throw new IllegalStateException("Id already set " + id + " vs " + this.id + " [Table: ${table.name}]");
    }
    // TODO NM notify id generator that id is not available anymore
    this.id = id
  }

  boolean isDefined() {
    return this.id != null
  }
  
  String toString() {
    return "${table.javaName}Ref[" + id + "]"
  }
#else
  String toString() {
    return "${table.javaName}Ref"
  }
#end

#if ( !${table.isAssociativeTable()} )
#foreach( $col in $table.columns )
#if( $col.references && $col.references.size() != 0 )
  List<${reftype}Ref> ${col.relation.ownerRelationName}List = []

  // depending on relation type with or without ellipse (...)
  def ${col.relation.ownerRelationName}(${col.referencedIdType}Ref ... refs) {
    ${col.relation.ownerRelationName}List.addAll(refs)
  }

#end
#end
#foreach( $referencingTable in $model.tables )
#foreach( $col in $referencingTable.columns )
#if( ${col.isReferencingTable($table)} )
  // depending on relation type with or with ellipse (...)
#if ( ${referencingTable.isAssociativeTable()} )
#set( $reftype = ${referencingTable.getAssociatedType($table)} )
#else
#set( $reftype = ${col.table.javaName} )
#end
  List<${reftype}Ref> ${col.relation.referencesRelationName}List = []

  def ${col.relation.referencesRelationName}(${reftype}Ref ... refs) {
    ${col.relation.referencesRelationName}List.addAll(refs)
  }

#end
#end
#end
#end
}

#end
#foreach( $table in $model.tables )
class ${table.javaName}Table {

  ColumnHeader REF = new ColumnHeader(name: "REF", type: ${table.javaName}Ref.class)

#foreach( $col in $table.columns )
  ColumnHeader ${col.name} = new ColumnHeader(name: "${col.name}", type: ${col.testModelType}, isIdentificator: ${col.isIdentifier()}, javaName: "${col.javaName}" )

## check if column is an identifier
#if ( ${col.isIdTruncable()} )
#set( $shortname  = $col.getNameWithoutId() )
  ColumnHeader ${shortname} = new ColumnHeader(name: "${shortname}", type: ${col.testModelType}, javaName: "${col.javaName}")

#end
#end
  static ThreadLocal<List> context = new ThreadLocal<List>()
  
  ${model.package}.${table.javaName}Table table

  def ${table.javaName}Table(${model.package}.${table.javaName}Table table) {
    this.table = table
  }

  static or(self, arg) {
    appendRow(self, arg)
  }

  static or(Integer self, Integer arg) {
    appendRow(self, arg)
  }

  static or(Boolean self, Boolean arg) {
    appendRow(self, arg)
  }

  static appendRow(value, nextValue) {
    def row = new Row(values: [value])
    context.get().add(row)
    row.or(nextValue)
  }

  def parseTable(Closure rows) {
    context.set([])
    use(${table.javaName}Table) {
      rows.delegate = this
      rows.resolveStrategy = Closure.DELEGATE_FIRST
      rows()
    }
    context.get()
  }
  
  boolean isHeadRow(Row row) {
    null == row.values.find { value ->
      !(value instanceof ColumnHeader)
    }
  }
  
  int getRefColumn(Row header) {
    int result = -1
    int index = 0
    header.values.each { ColumnHeader column ->
      if (column.name == "REF") result = index
      index++
    }
    return result
  }
  
  int getIdColumn(Row header) {
    int result = -1
    int index = 0
    header.values.each { ColumnHeader column ->
      if (column.isIdentificator) result = index
      index++
    }
    return result
  }

  def rows(Closure rows) {
    def tableData = parseTable(rows)
    def head = null
    int columns = 0
    int lineNr = 0
    
    int colRef = -1
    int colId = -1
    
    tableData.each { Row row ->
      lineNr++    
      if (isHeadRow(row)) {
        head = row
        colRef = getRefColumn(head)
        colId = getIdColumn(head)
        columns = row.values.size()
      }
      else {
        if (row.values.size() != columns) throwColumnsDoNotMatchException(lineNr, row)
        // rowbuilder = table_${table.javaName}.insertRow()
		
        RowBuilder_${table.javaName} rowbuilder = null 
      
        // TODO NM check if there is a row with that id already
        // check if there is an ID -> search it
        // check if there is a Ref -> check if it has an ID -> search it
        if (colId != -1) {
          def id = row.values[colId]
          try {
            rowbuilder = table.findWhere.id(id)
          }
          catch (Exception e) {
          }
        }
        if (colRef != -1) {
          def ref = row.values[colRef]
          if (ref.isDefined()) {
            try {
              // TODO NM check if there was a rowbuilder already...
              // Bad: Not possible to compare both rowbuilders :-(
              rowbuilder = table.findWhere.id(ref.id)
            }
            catch (Exception e) {
            }
          }
        }
        
        if (rowbuilder != null) {
          if (colId != -1) {
            ColumnHeader column = head.values[colId]
            def method = "get" + column.javaName
            def id = row.values[colId]
            def value = rowbuilder."$method"()
            if (id != value) throwRedefinedIdException(lineNr, row)
          }
##          if (colRef != -1) {
##            ColumnHeader column = head.values[colRef]
##            def method = "get" + column.javaName
##            def ref = row.values[colRef]
##            def value = rowbuilder."$method"()
##            if (ref.isDefined()) {
##              if (ref.id != value) throwRedefinedIdException(lineNr, row)
##            } 
##          }
        }        
        
        if (rowbuilder == null) {
          rowbuilder = table.insertRow()
          if (colId != -1) {
            ColumnHeader column = head.values[colId]
            def method = "set" + column.javaName
            def value = row.values[colId]
          	rowbuilder."$method"(value)
          	
          	println "Adding ${table.javaName} with $value"
          	
          	if (colRef != -1) {
              def ref = row.values[colRef]
              ref.id = value
          	}
          }
        }
        //def resultRow = new ${table.javaName}TableRow()
        for (columnIndex in 0..(columns-1)) {
          if (columnIndex == colRef || columnIndex == colId) {
            continue;
          }

          ColumnHeader column = head.values[columnIndex]
          def method = "set" + column.javaName
          def value = row.values[columnIndex]
          if (value instanceof DatabaseReference) {
            println "Setting $method ( " + value.id + " ) on " + rowbuilder
          	rowbuilder."$method"(value.id)
          } else {
            println "Setting $method ( " + value + " ) on " + rowbuilder
          	rowbuilder."$method"(value)
          }
        }
      }
    }
  }
  
  def throwColumnsDoNotMatchException(int lineNr, Row row) {
    throwException("column count does not match", lineNr, row)
  }

  def throwRedefinedIdException(int lineNr, Row row) {
    throwException("Id redefined", lineNr, row)
  }
  
  def throwException(String message, int lineNr, Row row) {
    StringBuilder builder = new StringBuilder()
    builder.append("Error in ${table.javaName}, line " + lineNr + ": " + message)
    if (row.values.size() > 0 ) {
      builder.append(" [Row: ")
      row.values.each { value ->
        builder.append(value)
        builder.append(" | ")
      }
      builder.setLength(builder.length() - 3)
      builder.append("]")
    }
    throw new IllegalArgumentException(builder.toString())
  }
##  @ToString
##  class ${table.javaName}TableRow {
##    
###if ( $table.identifierColumn )
##    ${table.javaName}Ref REF
##    
##    def REF(${table.javaName}Ref REF){
##      this.REF = REF
##    }
##    
##    def REF() {
##      this.REF
##    }
##    
###end
###foreach( $col in $table.columns )
##    ${col.testModelType} ${col.name}
##    
##    def ${col.name}(${col.testModelType} ${col.name}){
##      this.${col.name} = ${col.name}
##    }
##    
##    def ${col.name}() {
##      this.${col.name}
##    }
##
###if ( ${col.isIdTruncable()} )
###set( $shortname  = $col.getNameWithoutId() )
##    def ${shortname}(${col.testModelType} ${col.name}){
##      this.${col.name} = ${col.name}
##    }
##    
##    def ${shortname}() {
##      this.${col.name}
##    }
##
###end
###end
##  }
##
}

#end
// TODO NM Class should actually be named "DataSet", but there would be a naming conflict...
class ${model.name}Parser {

  ${model.name}DataSet dataset = new ${model.name}DataSet() {
      void initDataSet() { }
    }

#foreach( $table in $model.tables )
  ${table.javaName}Table ${table.javaVariableName}Table = new ${table.javaName}Table(dataset.table_${table.javaName})
  
#end
  def tables(Closure table) {
    table.delegate = this
    table.resolveStrategy = Closure.DELEGATE_FIRST
    table()
  }
  
  def relations(Closure relations) {
    relations()
  }
 
  def createDataSet() {
##    ${model.name}DataSet dataset = new ${model.name}DataSet() {
##      void initDataSet() { 
###foreach( $table in $model.tables )
##        add${table.javaName}Table()
###end
##      }
##      
###foreach( $table in $model.tables )
##      void add${table.javaName}Table() {
##        ${table.javaVariableName}Table.rows.each { ${table.javaName}Table.${table.javaName}TableRow tableRow ->
##          RowBuilder_${table.javaName} row = table_${table.javaName}.insertRow()
###foreach( $col in $table.columns )
###if( $col == $table.identifierColumn ) 
##          // if primary key column has a value set REF to that value else use REFs value
##          if (tableRow.${col.name} != null) {
##            row.set${col.javaName}(tableRow.${col.name})
##            tableRow.REF.id = tableRow.${col.name}
##          } 
##          else if (tableRow.REF != null) {
##            row.set${col.javaName}(tableRow.REF.id)
##            tableRow.${col.name} = tableRow.REF.id
##          }
###elseif( $col.references && $col.references.size() != 0 )
##          if (tableRow.${col.name}) row.set${col.javaName}(tableRow.${col.name}.id)
###else
##          if (tableRow.${col.name}) row.set${col.javaName}(tableRow.${col.name})
###end
###end
##        }
##      }
##
###end
##    }
    dataset.createDBUnitDataSet()
  }
}