#set($filename = ${model.javaName} + "Table" )
#if( $model.package && $model.package.length() != 0 )
#set($package  = ${model.package} + ".dsl" )
#else
#set($package  = "dsl" )
#end
package ${package};

import groovy.lang.Closure;

import java.util.HashSet;
import java.util.Set;

###if( $model.package && $model.package.length() != 0 )
##import ${model.package}.${model.dataSet.name}DataSet;
###end
import ${model.package}.${model.javaName}Table.${model.javaName}Where;
import ${model.package}.${model.javaName}Table.RowBuilder_${model.javaName};
##import ${model.package}.${model.javaName}Table.RowCollection_${model.javaName};
import com.seitenbau.testing.dbunit.dsl.ColumnBinding;
import com.seitenbau.testing.dbunit.dsl.TableParser;
import com.seitenbau.testing.dbunit.dsl.GeneralTableRowCallback;
import com.seitenbau.testing.dbunit.dsl.ITableAdapter;

#set($table = $model)

public class ${model.javaName}Table {

  public ColumnBinding<RowBuilder_${model.javaName}, ${model.javaName}Where> REF = ${model.javaName}TableBinding.REF;

#foreach( $col in $model.columns )
  ColumnBinding<RowBuilder_${model.javaName}, ${model.javaName}Where> ${col.name} = ${model.javaName}TableBinding.${col.name};

## check if column is an identifier
#if ( ${col.isIdTruncable()} )
#set( $shortname  = $col.getNameWithoutId() )
  public ColumnBinding<RowBuilder_${model.javaName}, ${model.javaName}Where> ${shortname} = ${model.javaName}TableBinding.${col.name};

#end
#end
  private final ${model.dataSet.name}DSL _scope;

  private final ${model.package}.${model.javaName}Table _table;

  private final Set<${model.javaName}Ref> _usedRefs;

  private final ITableAdapter<RowBuilder_${model.javaName}, ${model.javaName}Where, ${model.javaName}Ref> _adapter = new ITableAdapter<RowBuilder_${model.javaName}, ${model.javaName}Where, ${model.javaName}Ref>()
  {
    public RowBuilder_${model.javaName} insertRow() 
    {
      return _table.insertRow();
    }
	  
    public ${model.javaName}Where getFindWhere()
    {
      return _table.findWhere;
    }
    
	public void referenceUsed(${model.javaName}Ref reference, RowBuilder_${model.javaName} row)
	{
	  if (row != null) {
        reference.setBuilder(_scope, row);
	    _usedRefs.add(reference);
	  }
	}

	public RowBuilder_${model.javaName} getRowByReference(${model.javaName}Ref reference)
	{
	  return reference.getBuilder(_scope);
	}
    
    public String getTableName() {
      return "${model.javaName}";
    }
  };
    
  ${model.javaName}Table(${model.dataSet.name}DSL scope, ${model.package}.${model.javaName}Table table)
  {
    _scope = scope;
    _table = table;
    _usedRefs = new HashSet<${model.javaName}Ref>();
  }
  
  Set<${model.javaName}Ref> getUsedRefs()
  {
    return _usedRefs;
  }
  
  ${model.package}.${model.javaName}Table getTableModel()
  {
    return _table;
  }
  
  public void rows(Closure<?> rows) {
    GeneralTableRowCallback<RowBuilder_${model.javaName}, ${model.javaName}Where, ${model.javaName}Ref> callback = 
        new GeneralTableRowCallback<RowBuilder_${model.javaName}, ${model.javaName}Where, ${model.javaName}Ref>(_adapter);
    TableParser.parseTable(rows, this, callback);
  }
}

