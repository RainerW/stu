#set($filename = ${model.javaName} + "Table" )
#if( $model.package && $model.package.length() != 0 )
#set($package  = ${model.package} + ".dsl" )
#else
#set($package  = "dsl" )
#end
#set($clsScope = ${model.dataSet.name} + "DSL")
#set($clsRowbuilder = "RowBuilder_" + ${model.javaName})
#set($clsWhere = ${model.javaName} + "Where")
#set($clsRef = ${model.javaName} + "Ref")
#set($clsTable = ${model.javaName} + "Table")
#set($clsBinding = ${model.javaName} + "TableBinding")
package ${package};

import groovy.lang.Closure;

import java.util.HashSet;
import java.util.Set;

###if( $model.package && $model.package.length() != 0 )
##import ${model.package}.${model.dataSet.name}DataSet;
###end
import ${model.package}.$clsTable.${clsWhere};
import ${model.package}.$clsTable.${clsRowbuilder};
##import ${model.package}.$clsTable.RowCollection_${model.javaName};
import com.seitenbau.testing.dbunit.dsl.ColumnBinding;
import com.seitenbau.testing.dbunit.dsl.TableParser;
import com.seitenbau.testing.dbunit.dsl.GeneralTableRowCallback;
import com.seitenbau.testing.dbunit.dsl.ITableAdapter;

#set($table = $model)

public class $clsTable {

  public ColumnBinding<${clsRowbuilder}, ${clsWhere}> REF = ${clsBinding}.REF;

#foreach( $col in $model.columns )
  ColumnBinding<${clsRowbuilder}, ${clsWhere}> ${col.name} = ${clsBinding}.${col.name};

## check if column is an identifier
#if ( ${col.isIdTruncable()} )
#set( $shortname  = $col.getNameWithoutId() )
  public ColumnBinding<${clsRowbuilder}, ${clsWhere}> ${shortname} = ${clsBinding}.${col.name};

#end
#end
  private final ${clsScope} _scope;

  private final ${model.package}.$clsTable _table;

  private final Set<${clsRef}> _usedRefs;

  private final ITableAdapter<${clsRowbuilder}, ${clsWhere}, ${clsRef}> _adapter = new ITableAdapter<${clsRowbuilder}, ${clsWhere}, ${clsRef}>()
  {
    public ${clsRowbuilder} insertRow() 
    {
      return _table.insertRow();
    }
	  
    public ${clsWhere} getFindWhere()
    {
      return _table.findWhere;
    }
    
	public void referenceUsed(${clsRef} reference, ${clsRowbuilder} row)
	{
	  if (row != null) {
        reference.setBuilder(_scope, row);
	    _usedRefs.add(reference);
	  }
	}

	public ${clsRowbuilder} getRowByReference(${clsRef} reference)
	{
	  return reference.getBuilder(_scope);
	}
    
    public String getTableName() {
      return "${model.javaName}";
    }
  };
    
  $clsTable(${clsScope} scope, ${model.package}.$clsTable table)
  {
    _scope = scope;
    _table = table;
    _usedRefs = new HashSet<${clsRef}>();
  }
  
  Set<${clsRef}> getUsedRefs()
  {
    return _usedRefs;
  }
  
  ${model.package}.$clsTable getTableModel()
  {
    return _table;
  }
  
  public void rows(Closure<?> rows) {
    GeneralTableRowCallback<${clsRowbuilder}, ${clsWhere}, ${clsRef}> callback = 
        new GeneralTableRowCallback<${clsRowbuilder}, ${clsWhere}, ${clsRef}>(_adapter);
    TableParser.parseTable(rows, this, callback);
  }
}

