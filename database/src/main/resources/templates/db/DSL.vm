#set($filename = ${model.name} + "DSL" )
#if( $model.package && $model.package.length() != 0 )
#set($package  = ${model.package} + ".dsl" )
#else
#set($package  = "dsl" )
#end
#set($clsScope = ${model.name} + "DSL")
#set($clsDataSet = ${model.name} + "DataSet")
#set($referenceMethod = "ref")
package ${package};

import com.seitenbau.testing.dbunit.dsl.IScope;
import org.dbunit.dataset.IDataSet;

#if( $model.package && $model.package.length() != 0 )
import ${model.package}.${clsDataSet};
#end
#foreach( $table in $model.tables )
import ${model.package}.${table.javaName}Table.RowBuilder_${table.javaName};
#end

import groovy.lang.Closure;

/**
 * Represents a ${model.name} Data Set Scope. Parses the DSL and builds
 * the datasets
 */
public class ${clsScope} implements IScope
{

  private final ${clsDataSet} dataset;

#foreach( $table in $model.tables )
  /**
   * ${table.description}
   */
  public final ${table.javaName}Table ${table.javaNameFirstLower}Table;
  
  // Getter for Groovy property access
  protected ${table.javaName}Table get${table.javaName}Table()
  {
    return ${table.javaNameFirstLower}Table;
  }
#end
  public ${clsScope}() {
    this(new ${clsDataSet}() 
    {
      @Override
      public void initDataSet() { }
    });
  }
  
  public ${clsScope}($clsDataSet dataset)
  {
    this.dataset = dataset;
#foreach( $table in $model.tables )
    ${table.javaNameFirstLower}Table = new ${table.javaName}Table(this, dataset.table_${table.javaName});
#end  
  }

  /**
   * Parses and integrates the tables to the data set
   * Supported tables:
   * <ul>
#foreach( $table in $model.tables )
   *   <li>{@code ${table.javaNameFirstLower}Table} - ${table.description}</li>
#end
   * </ul>
   *  
   * @param table Table data
   */
  public void tables(Closure<?> table)
  {
    setReferencesContext();
    table.setDelegate(this);
    table.setResolveStrategy(Closure.DELEGATE_FIRST);
    table.call();
    unsetReferencesContext();
  }
  
  /**
   * Parses the defined relations and integrates them into the data set
   * @param relations The relations data
   */
  public void relations(Closure<?> relations)
  {
    setReferencesContext();
    relations.call();
    unsetReferencesContext();
  }
  
  private void setReferencesContext()
  {
#foreach( $table in $model.tables )
#if ( !${table.isAssociativeTable()} )
    ${table.javaName}Ref.setThreadLocalScope(this);
#end
#end
  }
  
  private void unsetReferencesContext()
  {
#foreach( $table in $model.tables )
#if ( !${table.isAssociativeTable()} )
    ${table.javaName}Ref.unsetThreadLocalScope();
#end
#end
  }
 
#foreach( $reftable in $model.tables )
  
  /**
   * Replaces all occurrences of a ${reftable.javaName} reference with the represented value
   * @param reference The reference, which can be resolved now
   * @param row The row containing the represented values 
   */
  void replace${reftable.javaName}RefWithId(${reftable.javaName}Ref reference, RowBuilder_${reftable.javaName} row)
  {
#foreach( $table in $model.tables )
#foreach( $col in $table.columns )
#if ($col.reference && $col.reference.table == $reftable)
### $col in $table refers on reference
    // Ref: ${table.javaName} on ${col.javaName}
    for (RowBuilder_${table.javaName} builder : ${table.javaNameFirstLower}Table.getAllRowBuilders()) {
      if (builder.get${col.javaName}Raw() == reference)
      {
        builder.set${col.javaName}(row.get${col.reference.column.javaName}());
      }
    }
    
#end
#end
#end  
  }
#end

#foreach( $table in $model.tables )
#set($clsRef = ${table.javaName} + "Ref")
#set($clsRefAccess = ${table.javaName} + "RefAccess")
#set($varTable = ${table.javaNameFirstLower} + "Table")

  /**
   * Allows ${table.javaName} table data access using references
   * @param ref The reference which represents tha data
   * @return The accessor object 
   */
  public RowBuilder_${table.javaName} ${referenceMethod}(${clsRef} ref)
  {
    return ref.getBuilder(this);
  }
#end

  @Override
  public void bindRefs()
  {
    setReferencesContext();
  }
  
  /**
   * Creates a DbUnit dataset
   * @return The Dbunit dataset
   */
  public IDataSet createDataSet() 
  {
    return dataset.createDBUnitDataSet();
  }
}