#set($filename = ${model.name} + "DSL" )
#if( $model.package && $model.package.length() != 0 )
#set($package  = ${model.package} + ".dsl" )
#else
#set($package  = "dsl" )
#end
package ${package};

import org.dbunit.dataset.IDataSet;

#if( $model.package && $model.package.length() != 0 )
import ${model.package}.${model.name}DataSet;
#end
#foreach( $table in $model.tables )
import ${model.package}.${table.javaName}Table.RowBuilder_${table.javaName};
#end

import groovy.lang.Closure;

public class ${model.name}DSL 
{

  ${model.name}DataSet dataset = new ${model.name}DataSet() 
  {
    @Override
    public void initDataSet() { }
  };

#foreach( $table in $model.tables )
  ${table.javaName}Table ${table.javaVariableName}Table = new ${table.javaName}Table(this, dataset.table_${table.javaName});
  
#end
  public void tables(Closure<?> table)
  {
    table.setDelegate(this);
    table.setResolveStrategy(Closure.DELEGATE_FIRST);
    table.call();
  }
  
  public void relations(Closure<?> relations)
  {
    setReferencesContext();
    relations.call();
    resolveRelations();
    unsetReferencesContext();
  }
  
  private void setReferencesContext()
  {
#foreach( $table in $model.tables )
#if ( !${table.isAssociativeTable()} )
    ${table.javaName}Ref.setThreadLocalScope(this);
#end
#end
  }
  
  private void unsetReferencesContext()
  {
#foreach( $table in $model.tables )
#if ( !${table.isAssociativeTable()} )
    ${table.javaName}Ref.unsetThreadLocalScope();
#end
#end
  }

  private void resolveRelations()
  {
#foreach( $table in $model.tables )
#if ( !${table.isAssociativeTable()} )
    updateRelations${table.javaName}Ref();
#end
#end
  }
 
#foreach( $table in $model.tables )
#if ( !${table.isAssociativeTable()} )
  private void updateRelations${table.javaName}Ref()
  {
#macro( addReference $verb $refRef )
#end  
  
#foreach( $col in $table.columns )
#if( $col.references && $col.references.size() != 0 )
#set($clsRef = ${table.javaName} + "Ref")
#set($varRef = ${table.javaVariableName} + "Ref")
#set($varTable = ${table.javaVariableName} + "Table")
#set($clsRowbuilder = "RowBuilder_" + ${table.javaName})
#set($varRowbuilder = ${table.javaVariableName})
    for (${clsRef} ${varRef} : ${varTable}.getUsedRefs())
    {
//1
#set($refClsRef = ${col.reference.table.javaName} + "Ref")      
#set($refVarRef = ${col.reference.table.javaVariableName} + "Ref")      
#set($refClsRowbuilder = "RowBuilder_" + ${col.reference.table.javaName})
#set($refVarRowbuilder = ${col.reference.table.javaVariableName})
      ${clsRowbuilder} ${varRowbuilder} = ${varRef}.getBuilder(this);
      for (${refClsRef} ${refVarRef} : ${varRef}.${col.reference.localName}List.get(this))
      {
        System.out.println("RELATION: Updated Row in ${table.javaName}");
        ${refClsRowbuilder} ${refVarRowbuilder} = ${refVarRef}.getBuilder(this);
        ${col.javaType} value = ${refVarRowbuilder}.get${col.reference.column.javaName}();
        ${varRowbuilder}.set${col.javaName}(value);
      }
      
      ${varRef}.${col.reference.localName}List.clear();
    } 
#end
#end




#foreach( $referencingTable in $table.dataSet.tables )
#foreach( $col in $referencingTable.columns )
#set($varRef = ${table.javaVariableName} + "Ref")
#if( ${col.isReferencingTable($table)} )
#set($varList = ${col.reference.remoteName} + "List")
#set($clsRef = ${table.javaName} + "Ref")
    for (${clsRef} ${varRef} : ${table.javaVariableName}Table.getUsedRefs())
    {
      RowBuilder_${table.javaName} ${table.javaVariableName} = ${varRef}.getBuilder(this);
#if ( ${referencingTable.isAssociativeTable()} )
//2
#set($reftable = ${referencingTable.getAssociatedTable($table)})
#set($refClsRef = ${reftable.javaName} + "Ref")
#set($refVarRef = ${reftable.javaVariableName} + "Ref")
#set($refClsRowbuilder = "RowBuilder_" + ${reftable.javaName})
#set($refVarRowbuilder = ${reftable.javaVariableName})
      for (${refClsRef} ${refVarRef} : ${varRef}.${varList}.get(this))
      {
        System.out.println("RELATION: Inserted Row in ${referencingTable.javaName}");
        ${refClsRowbuilder} ${refVarRowbuilder} = ${refVarRef}.getBuilder(this); 
        RowBuilder_${referencingTable.javaName} row = ${referencingTable.javaVariableName}Table.getTableModel().insertRow();
#foreach( $rcol in $referencingTable.columns )
        row.set${rcol.javaName}(${rcol.reference.table.javaVariableName}.get${rcol.reference.javaName}());
#end
      }
#else
//3
#set($reftable = ${col.table})
#set($refClsRef = ${reftable.javaName} + "Ref")
#set($refVarRef = ${reftable.javaVariableName} + "Ref")
#set($refClsRowbuilder = "RowBuilder_" + ${reftable.javaName})
#set($refVarRowbuilder = ${reftable.javaVariableName})
      for (${refClsRef} ${refVarRef} : ${varRef}.${varList}.get(this))
      {
        System.out.println("RELATION: Updated Row in ${reftable.javaName}");
        ${refClsRowbuilder} ${refVarRowbuilder} = ${refVarRef}.getBuilder(this);
        ${col.javaType} value = ${table.javaVariableName}.get${col.reference.column.javaName}();
        ${refVarRowbuilder}.set${col.javaName}(value);
      }
#end

      ${varRef}.${varList}.clear(); 
    }
#end
#end
#end
  }

#end
#end

  public IDataSet createDataSet() 
  {
    return dataset.createDBUnitDataSet();
  }
}