#set($filename = ${model.name} + "DSL" )
#if( $model.package && $model.package.length() != 0 )
#set($package  = ${model.package} + ".dsl" )
#else
#set($package  = "dsl" )
#end
package ${package};

import org.dbunit.dataset.IDataSet;

#if( $model.package && $model.package.length() != 0 )
import ${model.package}.${model.name}DataSet;
#end
#foreach( $table in $model.tables )
import ${model.package}.${table.javaName}Table.RowBuilder_${table.javaName};
#end

import groovy.lang.Closure;

public class ${model.name}DSL {

  ${model.name}DataSet dataset = new ${model.name}DataSet() {
      @Override
      public void initDataSet() { }
    };

#foreach( $table in $model.tables )
  ${table.javaName}Table ${table.javaVariableName}Table = new ${table.javaName}Table(this, dataset.table_${table.javaName});
  
#end
  public void tables(Closure<?> table) {
    table.setDelegate(this);
    table.setResolveStrategy(Closure.DELEGATE_FIRST);
    table.call();
  }
  
  public void relations(Closure<?> relations) {
    relations.call();
    
#foreach( $table in $model.tables )
#if ( !${table.isAssociativeTable()} )
    updateRelations${table.javaName}Ref();
#end
#end
  }
 
#foreach( $table in $model.tables )
#if ( !${table.isAssociativeTable()} )
  private void updateRelations${table.javaName}Ref() {
#foreach( $col in $table.columns )
#if( $col.references && $col.references.size() != 0 )
    for (${table.javaName}Ref ${table.javaVariableName}Ref : ${table.javaVariableName}Table.getUsedRefs())
    {
      RowBuilder_${table.javaName} ${table.javaVariableName} = ${table.javaVariableName}Ref.getBuilder(this);
      for (${col.reference.table.javaName}Ref ${col.reference.table.javaVariableName}Ref : ${table.javaVariableName}Ref.${col.reference.localName}List)
      {
        System.out.println("RELATION: Updated Row in ${table.javaName}");
        RowBuilder_${col.reference.table.javaName} ${col.reference.table.javaVariableName} = ${col.reference.table.javaVariableName}Ref.getBuilder(this);
        ${col.javaType} value = ${col.reference.table.javaVariableName}.get${col.reference.column.javaName}();
        ${table.javaVariableName}.set${col.javaName}(value);
      }
      
      ${table.javaVariableName}Ref.${col.reference.localName}List.clear();
    } 
#end
#end
#foreach( $referencingTable in $table.dataSet.tables )
#foreach( $col in $referencingTable.columns )
#if( ${col.isReferencingTable($table)} )
    for (${table.javaName}Ref ${table.javaVariableName}Ref : ${table.javaVariableName}Table.getUsedRefs())
    {
      RowBuilder_${table.javaName} ${table.javaVariableName} = ${table.javaVariableName}Ref.getBuilder(this);
#if ( ${referencingTable.isAssociativeTable()} )
#set( $reftable = ${referencingTable.getAssociatedTable($table)} )
      for (${reftable.javaName}Ref ${reftable.javaVariableName}Ref : ${table.javaVariableName}Ref.${col.reference.remoteName}List)
      {
        System.out.println("RELATION: Inserted Row in ${referencingTable.javaName}");
        RowBuilder_${reftable.javaName} ${reftable.javaVariableName} = ${reftable.javaVariableName}Ref.getBuilder(this); 
        RowBuilder_${referencingTable.javaName} row = ${referencingTable.javaVariableName}Table.getTableModel().insertRow();
#foreach( $rcol in $referencingTable.columns )
        row.set${rcol.javaName}(${rcol.reference.table.javaVariableName}.get${rcol.reference.javaName}());
#end
      }
      
      ${table.javaVariableName}Ref.${col.reference.remoteName}List.clear();
#else
#set( $reftable = ${col.table} )
      for (${reftable.javaName}Ref ${reftable.javaVariableName}Ref : ${table.javaVariableName}Ref.${col.reference.remoteName}List)
      {
        System.out.println("RELATION: Updated Row in ${reftable.javaName}");
        RowBuilder_${reftable.javaName} ${reftable.javaVariableName} = ${reftable.javaVariableName}Ref.getBuilder(this);
        ${col.javaType} value = ${table.javaVariableName}.get${col.reference.column.javaName}();
        ${reftable.javaVariableName}.set${col.javaName}(value);
      }
      
      ${table.javaVariableName}Ref.${col.reference.remoteName}List.clear(); 
#end
    }
#end
#end
#end
  }

#end
#end

  public IDataSet createDataSet() {
    return dataset.createDBUnitDataSet();
  }
}