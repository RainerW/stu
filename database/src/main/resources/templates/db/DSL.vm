#set($filename = ${model.name} + "DSL" )
#if( $model.package && $model.package.length() != 0 )
#set($package  = ${model.package} + ".dsl" )
#else
#set($package  = "dsl" )
#end
#set($clsScope = ${model.name} + "DSL")
#set($clsDataSet = ${model.name} + "DataSet")
#set($referenceMethod = "reference")
package ${package};

import org.dbunit.dataset.IDataSet;

#if( $model.package && $model.package.length() != 0 )
import ${model.package}.${clsDataSet};
#end
#foreach( $table in $model.tables )
import ${model.package}.${table.javaName}Table.RowBuilder_${table.javaName};
#end

import groovy.lang.Closure;

public class ${clsScope} 
{

  ${clsDataSet} dataset = new ${clsDataSet}() 
  {
    @Override
    public void initDataSet() { }
  };

#foreach( $table in $model.tables )
  ${table.javaName}Table ${table.javaNameFirstLower}Table = new ${table.javaName}Table(this, dataset.table_${table.javaName});
  
#end
  public void tables(Closure<?> table)
  {
    setReferencesContext();
    table.setDelegate(this);
    table.setResolveStrategy(Closure.DELEGATE_FIRST);
    table.call();
    unsetReferencesContext();
  }
  
  public void relations(Closure<?> relations)
  {
    setReferencesContext();
    relations.call();
    unsetReferencesContext();
  }
  
  private void setReferencesContext()
  {
#foreach( $table in $model.tables )
#if ( !${table.isAssociativeTable()} )
    ${table.javaName}Ref.setThreadLocalScope(this);
#end
#end
  }
  
  private void unsetReferencesContext()
  {
#foreach( $table in $model.tables )
#if ( !${table.isAssociativeTable()} )
    ${table.javaName}Ref.unsetThreadLocalScope();
#end
#end
  }
 
#foreach( $reftable in $model.tables )

  void replace${reftable.javaName}RefWithId(${reftable.javaName}Ref reference, RowBuilder_${reftable.javaName} row)
  {
#foreach( $table in $model.tables )
#foreach( $col in $table.columns )
#if ($col.reference && $col.reference.table == $reftable)
### $col in $table referes on reference
    // Ref: ${table.javaName} on ${col.javaName}
    for (RowBuilder_${table.javaName} builder : ${table.javaNameFirstLower}Table.getAllRowBuilders()) {
      if (builder.get${col.javaName}Raw() == reference)
      {
        builder.set${col.javaName}(row.get${col.reference.column.javaName}());
      }
    }
    
#end
#end
#end  
  }
#end

#foreach( $table in $model.tables )
#set($clsRef = ${table.javaName} + "Ref")
#set($clsRefAccess = ${table.javaName} + "RefAccess")
#set($varTable = ${table.javaNameFirstLower} + "Table")

  public ${clsRefAccess} ${referenceMethod}(${clsRef} ref)
  {
    return new ${clsRefAccess}(ref, this);
  }
  
  public static class ${clsRefAccess}
  {
    private final ${clsRef} _ref;
    private final ${clsScope} _scope;
    
    private $clsRefAccess(${clsRef} ref, ${clsScope} scope)
    {
      _ref = ref;
      _scope = scope;
    }
#foreach( $col in $table.columns )

    public ${col.javaType} ${col.javaNameFirstLower}()
    {
      return _ref.getBuilder(_scope).get${col.javaName}();
    }
#end
  }
#end
  
  public IDataSet createDataSet() 
  {
    return dataset.createDBUnitDataSet();
  }
}