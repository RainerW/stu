#set($filename = ${model.javaName} + "Ref" )
#if( $model.package && $model.package.length() != 0 )
#set($package  = ${model.package} + ".dsl" )
#else
#set($package  = "dsl" )
#end
package ${package};

#set($utilImportsNeeded  = false )
#if ( !${model.isAssociativeTable()} )
#foreach( $col in $model.columns )
#if( $col.references && $col.references.size() != 0 )
#set($utilImportsNeeded  = true )
#end
#end
#foreach( $referencingTable in $model.dataSet.tables )
#foreach( $col in $referencingTable.columns )
#if( ${col.isReferencingTable($model)} )
#set($utilImportsNeeded  = true )
#end
#end
#end
#end

#if ( $utilImportsNeeded )
import java.util.Arrays;
import java.util.List;
import java.util.LinkedList;
#end
import com.seitenbau.testdatadsl.stu.DatabaseReference;
###if( $model.package && $model.package.length() != 0 )
##//import ${model.package}.${model.dataSet.name}DataSet
###end
###foreach( $table in $model.dataSet.tables )
##import ${model.package}.${table.javaName}Table.RowBuilder_${table.javaName};
##import ${model.package}.${table.javaName}Table.RowCollection_${table.javaName};
###end



public class ${model.javaName}Ref extends DatabaseReference {

#if ( !${model.isAssociativeTable()} )
#foreach( $col in $model.columns )
#if( $col.references && $col.references.size() != 0 )
  List<${col.referencedTable.javaName}Ref> ${col.relation.ownerRelationName}List = new LinkedList<${col.referencedTable.javaName}Ref>();

  // depending on relation type with or without ellipse (...)
  void ${col.relation.ownerRelationName}(${col.referencedTable.javaName}Ref ... refs) {
    ${col.relation.ownerRelationName}List.addAll(Arrays.asList(refs));
  }

#end
#end
#foreach( $referencingTable in $model.dataSet.tables )
#foreach( $col in $referencingTable.columns )
#if( ${col.isReferencingTable($model)} )
  // depending on relation type with or with ellipse (...)
#if ( ${referencingTable.isAssociativeTable()} )
#set( $reftype = ${referencingTable.getAssociatedType($model)} )
#else
#set( $reftype = ${col.table.javaName} )
#end
  List<${reftype}Ref> ${col.relation.referencesRelationName}List = new LinkedList<${reftype}Ref>();

  void ${col.relation.referencesRelationName}(${reftype}Ref ... refs) {
    ${col.relation.referencesRelationName}List.addAll(Arrays.asList(refs));
  }

#end
#end
#end
#end
}

