#set($filename = ${model.javaName} + "Ref.groovy" )
#if( $model.package && $model.package.length() != 0 )
#set($package  = ${model.package} + ".groovy" )
#else
#set($package  = "groovy" )
#end
package ${package};

#if( $model.package && $model.package.length() != 0 )
//import ${model.package}.${model.dataSet.name}DataSet
#end
#foreach( $table in $model.dataSet.tables )
import ${model.package}.${table.javaName}Table.RowBuilder_${table.javaName}
import ${model.package}.${table.javaName}Table.RowCollection_${table.javaName}
#end
import com.seitenbau.testdatadsl.stu.DatabaseReference
import groovy.transform.ToString


class ${model.javaName}Ref extends DatabaseReference {

#if ( !${model.isAssociativeTable()} )
#foreach( $col in $model.columns )
#if( $col.references && $col.references.size() != 0 )
  List<${col.referencedTable.javaName}Ref> ${col.relation.ownerRelationName}List = []

  // depending on relation type with or without ellipse (...)
  def ${col.relation.ownerRelationName}(${col.referencedTable.javaName}Ref ... refs) {
    ${col.relation.ownerRelationName}List.addAll(refs)
  }

#end
#end
#foreach( $referencingTable in $model.dataSet.tables )
#foreach( $col in $referencingTable.columns )
#if( ${col.isReferencingTable($model)} )
  // depending on relation type with or with ellipse (...)
#if ( ${referencingTable.isAssociativeTable()} )
#set( $reftype = ${referencingTable.getAssociatedType($model)} )
#else
#set( $reftype = ${col.table.javaName} )
#end
  List<${reftype}Ref> ${col.relation.referencesRelationName}List = []

  def ${col.relation.referencesRelationName}(${reftype}Ref ... refs) {
    ${col.relation.referencesRelationName}List.addAll(refs)
  }

#end
#end
#end
#end
}

