#set($filename = ${model.javaName} + "Ref" )
#if( $model.package && $model.package.length() != 0 )
#set($package  = ${model.package} + ".dsl" )
#else
#set($package  = "dsl" )
#end
#set($clsScope = ${model.dataSet.name} + "DSL")
#set($clsRef = ${model.javaName} + "Ref")
#set($clsRowbuilder = "RowBuilder_" + ${model.javaName})
package ${package};

#set($utilImportsNeeded  = false )
#if ( !${model.isAssociativeTable()} )
#foreach( $col in $model.columns )
#if( $col.references && $col.references.size() != 0 )
#set($utilImportsNeeded  = true )
#end
#end
#foreach( $referencingTable in $model.dataSet.tables )
#foreach( $col in $referencingTable.columns )
#if( ${col.isReferencingTable($model)} )
#set($utilImportsNeeded  = true )
#end
#end
#end
#end

#if ( $utilImportsNeeded )
import java.util.Arrays;
#end
#if ( !${model.isAssociativeTable()} )
import java.util.List;
#end
import java.util.HashMap;
import java.util.Map;
import com.seitenbau.testing.dbunit.dsl.DatabaseReference;
#foreach( $table in $model.dataSet.tables )
import ${model.package}.${table.javaName}Table.RowBuilder_${table.javaName};
#end
##import ${model.package}.${model.javaName}Table.${clsRowbuilder};

public class ${clsRef} extends DatabaseReference {

  private final Map<${clsScope}, ${clsRowbuilder}> builders;
  
  public ${clsRef}()
  {
    builders = new HashMap<${clsScope}, ${clsRowbuilder}>();
  }
  
  private static final ThreadLocal<${clsScope}> threadScope = new ThreadLocal<${clsScope}>();
  
  static void setThreadLocalScope(${clsScope} scope) 
  {
    threadScope.set(scope);    
  }
  
  static void unsetThreadLocalScope() 
  {
    threadScope.remove();
  }
  
  void setBuilder(${clsScope} scope, ${clsRowbuilder} builder)
  {
    ${clsRowbuilder} lastBuilder = builders.put(scope, builder);
    if (lastBuilder != null && lastBuilder != builder) {
      throw new RuntimeException("Builder cannot be redefined");
    }
  }
  
  ${clsRowbuilder} getBuilder(${clsScope} scope)
  {
    return builders.get(scope);
  }
  
#macro( addReference $refTable $verb $remoteVerb )
#set($refRef = ${refTable.javaName} + "Ref" )
  Map<${clsScope}, List<${refRef}>> ${verb}List = new HashMap<${clsScope}, List<${refRef}>>();

  // depending on relation type with or without ellipse (...)
  void ${verb}(${refRef} ... refs) {
    ${clsScope} scope = threadScope.get();
    ${clsRowbuilder} thisBuilder = getBuilder(scope);
    
    for (${refRef} ref : refs) 
    {
      RowBuilder_${refTable.javaName} otherBuilder = ref.getBuilder(scope);
      
      if (thisBuilder != null && otherBuilder != null) 
      {
        // TODO NM correct handling
        //otherBuilder.setProfessorId(thisBuilder.getId());
      }
      else {
        if (thisBuilder == null)
        {
          getOrCreateList(${verb}List, threadScope).add(ref);
        }
        if (otherBuilder == null) {
          getOrCreateList(ref.${remoteVerb}List, threadScope).add(this);
        }
      }
    }
  }

#end  
#if ( !${model.isAssociativeTable()} )
#foreach( $col in $model.columns )
#if( $col.reference )
#addReference( $col.reference.table ${col.reference.localName} ${col.reference.remoteName} )
#end
#end
#foreach( $referencingTable in $model.dataSet.tables )
#foreach( $col in $referencingTable.columns )
#if( ${col.isReferencingTable($model)} )
#if ( ${referencingTable.isAssociativeTable()} )
#addReference( ${referencingTable.getAssociatedTable($model)} ${col.reference.remoteName} ${referencingTable.getReferencingColumn($model).reference.remoteName} )
#else
#addReference( ${col.table} ${col.reference.remoteName} ${col.reference.localName} )
#end
#end
#end
#end
#end

}

